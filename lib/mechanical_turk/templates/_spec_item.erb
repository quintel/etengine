<% if result.is_a?(Array) 
  present = result.first.last #.round(3) rescue nil
  future  = result.last.last #.round(3) rescue nil
  delta   = (future - present).round(1).rescue_nan rescue nil
  change  = (((future / present) - 1.0) * 100.0).round(1).rescue_nan rescue nil
  # WHITESPACE is significant for nice output
%>

    it "<%= key %>" do
      the_present.should be_within(some_tolerance).of(<%= present.round(MechanicalTurk::ROUNDING) rescue 'nil' %>)
      the_future.should  be_within(some_tolerance).of(<%= future.round(MechanicalTurk::ROUNDING) rescue 'nil' %>)
      the_relative_increase.should be_within(some_tolerance).of(<%= change.inspect %>)
      the_absolute_increase.should be_within(some_tolerance).of(<%= delta.inspect  %>)
    end

<% else %>

    it "<%= key %>" do
      the_value.should be_within(some_tolerance).of(<%= result.round(MechanicalTurk::ROUNDING) rescue 'nil' %>)
    end

<% end %>
