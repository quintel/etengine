app/views/layouts/gql_test_cases.html.haml!!! Strict
%html{ :xmlns => "http://www.w3.org/1999/xhtml" }
  %head
    %meta{ :content => "text/html; charset=utf-8", "http-equiv" => "Content-Type" }
    %title
      EnergyTransitionModel

    = javascript_include_tag :defaults
    = javascript_include_tag "underscore.min"
    = sprocket_layout_init :admin
    = sprocket_layout_init :testcases

    = stylesheet_link_tag 'all'
    = stylesheet_link_tag 'jasmine'
    = stylesheet_link_tag 'vendor/formtastic', 'formtastic_changes', 'admin'

    :javascript
      // custom jasmine matcher. so that we can write a concise:
      //   matches('cost_total', 41852270320, 41852270320,1); 
      //
      // It is equivalent to:
      //
      //   it("costs_total matches 41, 41", function() {
      //     expect(cost_total).toMatch(41852270320, 41852270320, 1);
      //   });
      
      var matches = function(object_name, present_expected, future_expected, tolerance_in_percent) {
        window[object_name] = new Gquery({key : object_name});
        var text = ""+object_name+" matches "+present_expected+" / "+future_expected
        return jasmine.getEnv().it(text, function() {
          // DEBT: find a better solution then window[object_name]. e.g. a hash. 
          expect({gquery_key : object_name}).toMatch(present_expected, future_expected, tolerance_in_percent);
        });
      };
      
      var value_match = function(expected, actual, precision_in_percent) {
        // DEBT check this calculation
        if (expected == 0 && actual == 0) { return true }
        if (expected == null && actual == null) { return true }
        return (Math.abs(((actual - expected) / actual)) < (precision_in_percent / 100))
      }
      
      var customMatchers = {
        toMatch: function(present_expected, future_expected, precision_in_percent) {
          var gquery = window[this.actual.gquery_key];
          var present_value = gquery.get('present_value');
          var future_value = gquery.get('future_value');
          // add this for a nice error message if spec fails
          this.actual.present_value = present_value;
          this.actual.future_value =  future_value ;
          
          return value_match(present_expected, present_value, precision_in_percent) && value_match(future_expected, future_value, precision_in_percent);
        }
      };
      
      // complete_function a function that will be run after api_call is finished.
      function load_queries(settings, complete_function) {
        // This eventually should be JSONP (so we can test different servers)
        $.post(
          '/api/v2/api_scenarios/test.json?'+settings,
          {
            '_method' : 'put',
            'r' : window.gqueries.keys().join(";")
          },
      
          function(data) {
            var result   = data.result;   // Results of this request for every "result[]" parameter
            $.each(result, function(gquery_key, value_arr) { 
              $.each(window.gqueries.with_key(gquery_key), function(i, gquery) {
                gquery.handle_api_result(value_arr);
              });
            });
            
            complete_function();
          }
        ).error(function(data){ console.log(data.responseText)});
      }


  %body
    = yield
