=# render 'list'

:javascript
  var matches = function(object_name, present_expected, future_expected, tolerance_in_percent) {
    var text = ""+object_name+" matches "+present_expected+" / "+future_expected
    return jasmine.getEnv().it(text, function() {
      expect(window[object_name]).toMatch(present_expected, future_expected, tolerance_in_percent);
    });
  };
  
  var cost_total = new Gquery({key : 'cost_total'});
  var co2_emission_electricity_ex_import = new Gquery({key : 'co2_emission_electricity_ex_import'});
  
  function load_queries() {
    $.getJSON(
      '/api/v2/api_scenarios/test.json?setting[country]=nl&setting[end_year]=2050',
      {'result' : window.gqueries.keys() },
      
      function(data) {
        var result   = data.result;   // Results of this request for every "result[]" parameter
        $.each(result, function(gquery_key, value_arr) { 
          $.each(window.gqueries.with_key(gquery_key), function(i, gquery) {
            gquery.handle_api_result(value_arr);
          });
        });
        run_tests();
        create_tests();
      }
    );
  }
  load_queries();
  
  describe("For country NL, end_year 2050", function() {
    
    beforeEach(function() {
      this.addMatchers({
        toMatch: function(present_expected, future_expected, precision_in_percent) {
          var gquery = this.actual;
          var present_value = gquery.get('present_value');
          var future_value = gquery.get('future_value');
          
          // DEBT check this calculation
          ((present_value - present_expected) / present_value) < (precision_in_percent / 100)
          return (((present_value - present_expected) / present_value) < (precision_in_percent / 100))
              && (((future_value - future_expected) / future_value) < (precision_in_percent / 100))
        }
      })
    });
    
    
    matches('cost_total', 41852270320, 41852270320, 1);
    // equivalent to:
    it("costs_total matches 41, 41", function() {
      expect(cost_total).toMatch(41852270320, 41852270320, 1);
    });
    
    
    //it("costs_total should be equal to 90, 80", function() {});
    //it("costs_total should be increase by 5%", function() {});
    //it("costs_total should be decrease by 5%", function() { });
  });
  
  function run_tests() {
    jasmine.getEnv().addReporter(new jasmine.TrivialReporter());
    jasmine.getEnv().execute();
  }
  
%pre#test_suite

  :javascript
    // This simply outputs the test cases for all the Gquery Objects
    // It is now called after the JSON request
    function create_tests() {
      window.gqueries.each(function(gquery) {
        var str = "matches('"+gquery.get('key')+"', "+gquery.get('present_value')+", "+gquery.get('future_value')+",1);\n"
        $('#test_suite').append(str);
      })
    };











