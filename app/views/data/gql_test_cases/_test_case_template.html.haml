%pre#before
  = @gql_test_case.instruction.lines.detect{|l| l.include?("settings")}.html_safe

  :erb
    describe("Test Suite", function() {
      beforeEach(function() { this.addMatchers(customMatchers); });

%pre#output
  -# Place for the generated test cases

%pre#after
  :erb
    });
    function run_tests() {
      jasmine.getEnv().addReporter(new jasmine.TrivialReporter());
      jasmine.getEnv().execute();
    }
    // Make an API call. When complete runs the test-suites
    load_queries(settings, run_tests);

  

%script
  -# extract the settings strings. It will be used later for load_queries
  = @gql_test_case.instruction.lines.detect{|l| l.include?("settings")}.html_safe
  
  // create Gquery objects for the gqueries we will test later.
  - Gquery.limit(1500).reject{|g| g.unit == 'converters'}.each do |gquery|
    == new Gquery({id : '#{gquery.id}', key: '#{gquery.key}'});

:javascript
  // This simply outputs the test cases for all the Gquery Objects
  // It is now called after the JSON request
  function create_tests() {
    $('#output').text("Processing...");
    var test_suite = "";
    window.gqueries.each(function(gquery) {
      // Create a test case for every gquery: matches(KEY, PRESENT, FUTUER)
      var f = gquery.get('future_value');
      var p = gquery.get('present_value');
      var future_value = _.isString(f) ? "'"+f+"'" : f;
      var present_value = _.isString(p) ? "'"+p+"'" : p;
      
      var str = "matches('"+gquery.get('key')+"', "+present_value+", "+future_value+",1);\n"
      test_suite = test_suite + str
    });
    $('#output').text(test_suite);
  };
  // Make an API call. When complete runs the test-suites
  
  $('#output').text("Loading..."); 
  load_queries(settings, create_tests);
  