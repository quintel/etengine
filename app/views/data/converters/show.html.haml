:ruby
  @pre = @converter_present.query
  @fut = @converter_future.query

= render "search_box"

.header= @converter_present

%table.floating
  %tr
    %td Sector
    %td= @converter_present.sector_key
  %tr
    %td Energy Balance Group
    %td
      - if g = @converter_present.energy_balance_group && g.to_s.present?
        = link_to g, data_energy_balance_group_path(:id => g)
  %tr
    %td Use
    %td= @converter_present.use_key
  %tr
    %td Groups
    %td= @converter_present.groups.join(' - ')
  %tr
    %td Graphviz
    %td
      = link_to 'Present', {:format => 'svg'}, :target => :blank
      = link_to 'Future', {:format => 'svg', :graph => 'future'}, :target => :blank


- if @converter_present.groups.include?(:cost_traditional_heat)
  - @values = Qernel::ConverterApi::HEAT_PRODUCTION_VALUES
  = render "data/converters/details"
- if @converter_present.groups.include?(:cost_electricity_production)
  - @values = Qernel::ConverterApi::ELECTRICITY_PRODUCTION_VALUES
  = render "data/converters/details"
- if @converter_present.groups.include?(:cost_heat_pumps)
  - @values = Qernel::ConverterApi::HEAT_PUMP_VALUES
  = render "data/converters/details"
- if @converter_present.groups.include?(:cost_chps)
  - @values = Qernel::ConverterApi::CHP_VALUES
  = render "data/converters/details"

.clear

%h3 Future Input / Outputs
= render 'converter_links'

%h3 Attributes and Calculations

%table.floating
  %thead
    %tr
      %th Converter Attributes
      %th Present
      %th Future
      %th Change
  %tbody
    - Qernel::ConverterApi::ATTRIBUTE_GROUPS.each do |group, attributes|
      %tr
        %th.attribute_group{:colspan => 4}= group
      - attributes.each do |attr_name|
        %tr
          %th= attr_name
          - result_fields(@pre,@fut,attr_name)

%table.floating
  %thead
    %tr
      %th Converter Calculations
      %th Present
      %th Future
      %th Change
      %th Unit
  %tbody
    :ruby
      calculations = {
        :demand => [:demand, :preset_demand, :demand_of_sustainable,
          :weighted_carrier_cost_per_mj, :weighted_carrier_co2_per_mj,
          :sustainability_share, :final_demand, :primary_demand,
          :primary_demand_of_fossil, :primary_demand_of_sustainable],
        :other => Qernel::ConverterApi.calculation_methods.sort
      }
      calculations[:demand] += @qernel_graph.carriers.
        map{|x| "primary_demand_of_#{x.key}"}.
        select{|x| val = @pre.send(x); val > 0.0}
      calculations[:other] += [:total_cost_per_mwh, :total_losses]

    - calculations.each_pair do |group, methods|
      %tr
        %th.calculation_group{:colspan => 5}= group
      - methods.each do |method|
        :ruby
          next unless @pre.respond_to?(method)
          present_value = @pre.send method
          future_value  = @fut.send method
          next if present_value.nil? && future_value.nil?
          next if present_value.to_f.nan? && future_value.to_f.nan?
          difference = ((future_value / present_value - 1) * 100).round(2) rescue nil
          difference = nil if difference.try :nan?
        %tr
          %th= method
          %td{:title => present_value}= auto_number present_value
          %td{:title => future_value}= auto_number future_value
          %td= "#{difference}%" if difference
          %td= Qernel::ConverterApi.unit_for_calculation(method)

.clear

%h3 References

%table
  - Gquery.name_or_query_contains(@converter_present.key.to_s).each do |gquery|
    %tr
      %td Gquery
      %td= link_to gquery.key, data_gquery_path(:id => gquery.id)
