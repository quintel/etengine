= render "data/shared/data_subnav"

:ruby
  @pre = @converter_present.query
  @fut = @converter_future.query
  converter_key = @converter_present.key.to_s


.row-fluid
  .span12
    .page-header
      %h1
        = converter_key
        %small== ID: #{@converter_present.excel_id}
        = link_to 'Visualize present graph', {:format => 'svg'}, :target => :blank, :class => 'btn btn-small'
        = link_to 'Visualize future graph', {:format => 'svg', :graph => 'future'}, :target => :blank, :class => 'btn btn-small'

.row-fluid
  .span12
    %h2 Details
    %table.table.table-condensed
      %tbody
        %tr
          %td Sector
          %td= @converter_present.sector_key
        %tr
          %td Energy Balance Group
          %td
            - if g = @converter_present.energy_balance_group && g.to_s.present?
              = link_to g, data_energy_balance_group_path(:id => g)
            - else
              empty
        %tr
          %td Use
          %td= @converter_present.use_key
        %tr
          %td Converter groups
          %td
            %ol
              - @converter_present.groups.each do |group|
                %li= group
        %tr
          %td Used in Gqueries
          %td
            %ol
              - Gquery.name_or_query_contains(converter_key).each do |gquery|
                %li= link_to gquery.key, data_gquery_path(:id => gquery.id)
        %tr
          %td Used in Inputs
          %td
            %ol
              - Input.with_queries_containing(converter_key).each do |input|
                %li= link_to input.key, data_input_path(:id => input.id, :highlight => converter_key)

.row-fluid
  .span12
    .page-header
      %h2 Future Input / Outputs
    = render 'converter_links'

.row-fluid
  .span12
    .page-header
      %h2 Converter Summary
    %table.table.table-condensed
      %thead
        %tr
          %th Method
          %th Label
          %th Present
          %th Future
          %th Unit
      %tbody
        - @presenter.attributes_and_methods_to_show.each_pair do |group, items|
          - next if items.empty?
          %tr
            %th{:colspan => 5}= group
          - items.each_pair do |key, opts|
            %tr
              %td= key
              %td= opts[:label]
              %td= @presenter.present_value key
              %td= @presenter.future_value key
              %td= opts[:unit]



.row-fluid
  .span6
    .page-header
      %h2 All Attributes
    %table.table.table-condensed
      %thead
        %tr
          %th Converter Attributes
          %th Present
          %th Future
          %th Change
          %th Unit
      %tbody
        - Qernel::ConverterApi::ATTRIBUTE_GROUPS.each do |group, attributes|
          %tr
            %th.attribute_group{:colspan => 5}= group
          - attributes.each do |attr_name, info|
            - desc, unit = info
            %tr
              %th= attr_name
              - result_fields(@pre,@fut,attr_name)
              %td= unit

  .span6
    .page-header
      %h2 All Calculations
    %table.table.table-condensed
      %thead
        %tr
          %th Converter Calculations
          %th Present
          %th Future
          %th Change
          %th Unit
      %tbody
        - @converter_api.calculation_methods.each_pair do |group, methods|
          %tr
            %th.calculation_group{:colspan => 5}= group
          - methods.each_pair do |method, opts|
            - present_value = @pre.instance_eval(method.to_s).to_f
            - next if present_value <= 0.0 && opts[:hide_if_zero]
            %tr
              %th= link_to method, calculation_debugger_path(@converter_present, method)
              - result_fields(@pre, @fut, method)
              %td= opts[:unit] || Qernel::ConverterApi.unit_for_calculation(method)

    .clear
