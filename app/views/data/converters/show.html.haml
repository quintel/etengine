:ruby
  @pre = @converter_present.query
  @fut = @converter_future.query

= render "search_box"

.header= @converter_present

%h3 Info

%table
  %tr
    %td Sector
    %td= @converter_present.sector_key
  %tr
    %td Energy Balance Group
    %td
      - if g = @converter_present.energy_balance_group && g.to_s.present?
        = link_to g, data_energy_balance_group_path(:id => g)
  %tr
    %td Use
    %td= @converter_present.use_key
  %tr
    %td Groups
    %td= @converter_present.groups.join(' - ')
  %tr
    %td Graphviz
    %td
      = link_to 'Present', {:format => 'svg'}, :target => :blank
      = link_to 'Future', {:format => 'svg', :graph => 'future'}, :target => :blank

%h3 Future Input / Outputs
= render 'converter_links'

- if @converter_present.groups.include?(:cost_traditional_heat)
  %h3 Converter details
  - @values = Qernel::ConverterApi::HEAT_PRODUCTION_VALUES
  = render "data/converters/details"
- if @converter_present.groups.include?(:cost_electricity_production)
  %h3 Converter details
  - @values = Qernel::ConverterApi::ELECTRICITY_PRODUCTION_VALUES
  = render "data/converters/details"
- if @converter_present.groups.include?(:cost_heat_pumps)
  %h3 Converter details
  - @values = Qernel::ConverterApi::HEAT_PUMP_VALUES
  = render "data/converters/details"
- if @converter_present.groups.include?(:cost_chps)
  %h3 Converter details
  - @values = Qernel::ConverterApi::CHP_VALUES
  = render "data/converters/details"

%h3 Attributes and calculations

%table
  %thead
    %tr
      %th Converter Attributes
      %th Present
      %th Future
      %th Change
  %tbody
    - Qernel::ConverterApi::ATTRIBUTE_GROUPS.each do |group, attributes|
      %tr
        %th.attribute_group{:colspan => 4}= group
      - attributes.reject{|a| a.to_s.include?('expected')}.each do |attr_name|
        %tr
          %th= attr_name
          - result_fields(@pre,@fut,attr_name)

%table
  %thead
    %tr
      %th Calculations
      %th Present
      %th Future
      %th Change
  %tbody
    %tr
      %th Demand
      - result_fields(@pre,@fut, :demand)
    %tr
      %th Demand Preset
      - result_fields(@pre,@fut, :preset_demand)
    %tr
      %th Demand Sustainable
      - result_fields(@pre,@fut, :demand_of_sustainable)
    %tr
      %th Weighted Carrier Cost Share
      - result_fields(@pre,@fut, :weighted_carrier_cost_per_mj)
    %tr
      %th Weighted Carrier CO2 Share
      - result_fields(@pre,@fut, :weighted_carrier_co2_per_mj)
    %tr
      %th Sustainabability Share
      - result_fields(@pre,@fut, :sustainability_share)

    - Qernel::ConverterApi.calculation_methods.sort.each do |attr_name|
      :ruby
        present_value = @pre.send attr_name
        future_value  = @fut.send attr_name
        next if present_value.nil? && future_value.nil?
        next if present_value.to_f.nan? && future_value.to_f.nan?
        difference = (future_value / present_value - 1) * 100 rescue nil
        difference = nil if difference.try :nan?
      %tr
        %th= attr_name
        %td{:title => present_value}= auto_number present_value
        %td{:title => future_value}= auto_number future_value
        %td= "#{difference}%" if difference
    %tr
      %th Total Cost Per MWhe
      - result_fields(@pre,@fut) do |converter|
        - converter.total_cost_per_mje.andand.per_mj_to_per_mwh
    %tr
      %th Total Losses
      - result_fields(@pre.converter,@fut.converter, :total_losses)

  %table
    %thead
      %tr
        %th Final and primary demand
        %th Present
        %th Future
        %th Change
    %tr
      %th Final Demand
      - result_fields(@pre,@fut, :final_demand)
    %tr
      %th Primary Demand
      - result_fields(@pre,@fut, :primary_demand)
    %tr
      %th Primary Demand Fossil
      - result_fields(@pre,@fut, :primary_demand_of_fossil)
    %tr
      %th Primary Demand Sustainable
      - result_fields(@pre,@fut, :primary_demand_of_sustainable)

    - @qernel_graph.carriers.each do |carrier|
      - if primary_demand = @pre.primary_demand_of_carrier(carrier.key.to_sym) and primary_demand > 0.0
        %tr
          %th== Primary Demand of #{carrier.key}
          - result_fields(@pre,@fut) do |converter|
            - converter.primary_demand_of_carrier(carrier.key.to_sym)

%table
  %thead
    %tr
      %th Expected Values
      %th Present
      %th Future
      %th Change
  %tbody
    - Qernel::ConverterApi::ATTRIBUTES_USED.select{|a| a.to_s.include?('expected')}.each do |attr_name|
      %tr
        %th= attr_name
        - result_fields(@pre,@fut,attr_name)

%h3 References

%table
  - Gquery.name_or_query_contains(@converter_present.full_key).each do |gquery|
    %tr
      %td Gquery
      %td= link_to gquery.key, data_gquery_path(:id => gquery.id)
  - Input.embedded_gql_contains(@converter_present.full_key).each do |input|
    %tr
      %td Input
      %td= link_to input.key, data_input_path(:id => input.id)
