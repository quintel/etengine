= render "data/shared/data_subnav"

:ruby
  @pre = @converter_present.query
  @fut = @converter_future.query


.row-fluid
  .span12
    .page-header
      %h1
        = @converter_present.key
        %small== ID: #{@converter_present.excel_id}
        = link_to 'Visualize present graph', {:format => 'svg'}, :target => :blank, :class => 'btn btn-small'
        = link_to 'Visualize future graph', {:format => 'svg', :graph => 'future'}, :target => :blank, :class => 'btn btn-small'

.row-fluid
  .span12
    %h2 Details
    %table.table.table-condensed
      %tbody
        %tr
          %td Sector
          %td= @converter_present.sector_key
        %tr
          %td Energy Balance Group
          %td
            - if g = @converter_present.energy_balance_group && g.to_s.present?
              = link_to g, data_energy_balance_group_path(:id => g)
            - else
              empty
        %tr
          %td Use
          %td= @converter_present.use_key
        %tr
          %td Converter groups
          %td
            %ol
              - @converter_present.groups.each do |group|
                %li= group
        %tr
          %td Used in Gqueries
          %td
            %ol
              - Gquery.name_or_query_contains(@converter_present.key.to_s).each do |gquery|
                %li= link_to gquery.key, data_gquery_path(:id => gquery.id)

.row-fluid
  .span12
    .page-header
      %h2 Future Input / Outputs

    = render 'converter_links'

.row-fluid
  .span12
    %h2 Summary of Converter specifics
    - if @converter_present.groups.include?(:cost_traditional_heat)
      - @values = Qernel::ConverterApi::HEAT_PRODUCTION_VALUES
      = render "data/converters/details"
    - if @converter_present.groups.include?(:cost_electricity_production)
      - @values = Qernel::ConverterApi::ELECTRICITY_PRODUCTION_VALUES
      = render "data/converters/details"
    - if @converter_present.groups.include?(:cost_heat_pumps)
      - @values = Qernel::ConverterApi::HEAT_PUMP_VALUES
      = render "data/converters/details"
    - if @converter_present.groups.include?(:cost_chps)
      - @values = Qernel::ConverterApi::CHP_VALUES
      = render "data/converters/details"

.row-fluid

  .span6
    .page-header
      %h2 All Attributes
    %table.table.table-condensed
      %thead
        %tr
          %th Converter Attributes
          %th Present
          %th Future
          %th Change
          %th Unit
      %tbody
        - Qernel::ConverterApi::ATTRIBUTE_GROUPS.each do |group, attributes|
          %tr
            %th.attribute_group{:colspan => 5}= group
          - attributes.each do |attr_name, info|
            - desc, unit = info
            %tr
              %th= attr_name
              - result_fields(@pre,@fut,attr_name)
              %td= unit

  .span6
    .page-header
      %h2 All Calculations
    %table.table.table-condensed
      %thead
        %tr
          %th Converter Calculations
          %th Present
          %th Future
          %th Change
          %th Unit
      %tbody
        :ruby
          calculations = {
            :demand => [:demand, :preset_demand, :demand_of_sustainable,
              :weighted_carrier_cost_per_mj, :weighted_carrier_co2_per_mj,
              :sustainability_share, :final_demand, :primary_demand,
              :primary_demand_of_fossil, :primary_demand_of_sustainable],
            :new => [:nominal_input_capacity, :effective_input_capacity, :total_costs, 
              :fixed_costs, :cost_of_capital, :depreciation_costs, :variable_costs, 
              :fuel_costs, :number_of_units, :co2_emissions_costs, 
              :variable_operations_and_maintenance_costs, :initial_investment_costs,
              :typical_fuel_input],
            :old => [:mw_input_capacity, :typical_input_capacity],
            :other => Qernel::ConverterApi.calculation_methods.sort,

          }
          calculations[:demand] += @qernel_graph.carriers.
            map{|x| "primary_demand_of_#{x.key}"}.
            select{|x| val = @pre.send(x); val > 0.0}
          calculations[:other] += [:total_cost_per_mwh, :total_losses]

        - calculations.each_pair do |group, methods|
          %tr
            %th.calculation_group{:colspan => 5}= group
          - methods.each do |method|
            :ruby
              next unless @pre.respond_to?(method)
              present_value = @pre.send method
              future_value  = @fut.send method
              next if present_value.nil? && future_value.nil?
              next if present_value.to_f.nan? && future_value.to_f.nan?
              difference = ((future_value / present_value - 1) * 100).round(2) rescue nil
              difference = nil if difference.try :nan?
            %tr
              %th= link_to method, calculation_debugger_path(@converter_present, method)
              %td{:title => present_value}= auto_number present_value
              %td{:title => future_value}= auto_number future_value
              %td= "#{difference}%" if difference
              %td= Qernel::ConverterApi.unit_for_calculation(method)

    .clear
