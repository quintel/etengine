- content_for(:title, 'Scenarios')
= render "inspect/shared/inspect_subnav"

.container-fluid
  .row-fluid
    .span6
      / ──────────── New + Search ───────────────────
      %section#search_box
        = form_tag inspect_scenarios_path, method: :get do
          = search_field_tag :q, params[:q], placeholder: 'Scenario ID'
          = submit_tag 'Search', class: 'btn'

      %p
        = link_to "Create a new scenario", new_inspect_scenario_path, class: 'btn btn-primary'
        - if params[:api_scenario_id]
          = link_to 'View current scenario', inspect_scenario_path(id: params[:api_scenario_id]), class: 'btn'


    / ──────────── Download + Import ─────────────
    .span6.text-right
      = button_tag 'Download Dump',
                   type: 'button',
                   class: 'btn btn-primary',
                   style: 'min-width:130px; text-align:center;',
                   'data-toggle' => 'modal',
                   'data-target' => '#downloadModal'
      = button_tag 'Import dump',
                  type: 'button',
                  class: 'btn btn-secondary',
                  style: 'min-width:130px; text-align:center;',
                  'data-toggle' => 'modal',
                  'data-target' => '#importModal'

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    const input  = document.getElementById('scenario_ids_input');
    const button = document.getElementById('download_button');
    const baseUrl = button.dataset.baseUrl;
    const VALID_PATTERN = /^\s*\d+(?:\s*,\s*\d+)*\s*$/;

    input.addEventListener('input', () => {
      let raw = input.value;
      if (!VALID_PATTERN.test(raw)) {
        button.disabled = true;
        button.removeAttribute('href');
        return;
      }
      raw = raw.replace(/\s+/g, '');
      const params = new URLSearchParams({
        type:        'user_input',
        scenario_ids: raw
      });
      const href = `${baseUrl}?${params.toString()}`;

      button.disabled = false;
      button.setAttribute('onclick', `window.location='${href}'`);
    });
  });

  document.addEventListener('DOMContentLoaded', function() {
    // Download confirm
    document.getElementById('confirm_download').addEventListener('click', function() {
      var ids = document.getElementById('modal_scenario_ids').value;
      if (!ids.match(/^\s*\d+(?:\s*,\s*\d+)*\s*$/)) {
        alert('Please enter a comma-separated list of numbers.');
        return;
      }
      var form = document.getElementById('download_form');
      ids = ids.replace(/\s+/g, '');
      form.action = form.action + '?scenario_ids=' + encodeURIComponent(ids);
      form.submit();
    });

    // Import confirm
    document.getElementById('confirm_import').addEventListener('click', function() {
      var fileInput = document.getElementById('modal_dump_file');
      if (!fileInput.value) {
        alert('Please choose a JSON file to import.');
        return;
      }
      document.getElementById('import_form').submit();
    });
  });



%table.table.table-condensed.scenario-list
  %thead
    %tr
      %th{:colspan => 8} Scenario count: #{Scenario.count}
    %tr
      %th.narrow.text-center Visibility
      %th ID
      %th Owners
      %th End Year
      %th Area
      %th.narrow Compatibility
      %th
  %tfoot
    %tr
      %td{:colspan => 8}= paginate @scenarios
  %tbody
    - @scenarios.each do |s|
      %tr{ class: s.id.to_s == params[:api_scenario_id] ? 'active' : '' }
        %td.text-center
          - if s.private?
            %span.tag.private
              = inline_svg_tag 'font-awesome/16/lock.svg'
              Private
          - else
            %span.tag.gray Public
        %td
          = link_to s.id, inspect_scenario_path(:id => s.id)
          - if s.title
            %span{ style: 'margin: 0 0.25rem 0 0.5rem; font-weight: normal' }= s.title
          - if s.id.to_s == params[:api_scenario_id]
            %span.tag.green &#9733; Current Scenario
        %td
          - if s.scenario_users.present?
            - s.scenario_users.each do |scenario_user|
              - if scenario_user.user
                = link_to("#{scenario_user.user.name} (#{User::ROLES[scenario_user.role_id].to_s.humanize})", user_path(scenario_user.user))
              - else
                %span.muted= "#{scenario_user.email} (#{User::ROLES[scenario_user.role_id].to_s.humanize})"
          - else
            %span.muted No owner
        %td= s.end_year
        %td= s.area_code
        %td.narrow
          = formatted_scenario_compatibility(s)
        %td.actions
          - if params[:api_scenario_id] == s.id.to_s
            %span.muted Make active
          - else
            = link_to 'Make active', inspect_scenarios_path(@list_params.to_h.symbolize_keys.merge(api_scenario_id: s.id))
          = link_to 'Edit', edit_inspect_scenario_path(:id => s.id)

/ Download Modal
#downloadModal.modal.hide.fade
  .modal-header
    %button.close{'data-dismiss' => 'modal'} ×
    %h3 Download Scenarios
  .modal-body
    = form_tag download_dump_inspect_scenarios_path(format: :json),
               method: :get,
               id: 'download_form',
               class: 'form-inline' do
      = label_tag :modal_scenario_ids, 'Scenario IDs', class: 'inline-label'
      = text_field_tag :scenario_ids,
                       '',
                       placeholder: 'e.g. 123,456',
                       class: 'input-medium',
                       id: 'modal_scenario_ids'
  .modal-footer
    = button_tag 'Confirm Download',
                 type: 'button',
                 id: 'confirm_download',
                 class: 'btn btn-primary'
    = button_tag 'Close',
                 type: 'button',
                 class: 'btn',
                 'data-dismiss' => 'modal'

/ Import Modal
#importModal.modal.hide.fade
  .modal-header
    %button.close{'data-dismiss' => 'modal'} ×
    %h3 Import Scenarios
  .modal-body
    = form_tag load_dump_inspect_scenarios_path,
               multipart: true,
               local: true,
               id: 'import_form',
               class: 'form-inline' do
      = label_tag :modal_dump_file, 'JSON file', class: 'inline-label'
      = file_field_tag :dump,
                       accept: 'application/json',
                       id: 'modal_dump_file'
  .modal-footer
    = button_tag 'Confirm Import',
                 type: 'button',
                 id: 'confirm_import',
                 class: 'btn btn-primary'
    = button_tag 'Close',
                 type: 'button',
                 class: 'btn',
                 'data-dismiss' => 'modal'
