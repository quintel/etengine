%table.table.node-edges
  %tbody
    %tr
      %td
        %table.table.table-condensed.table-bordered
          %thead
            %tr
              %th.centered
                Edges
                %span.aggregate-demand
                  = auto_number node_flow(c, :outputs)
              %th.centered Outputs
          %tbody
            - c.outputs.sort_by { |c| c.carrier.key }.each do |output_slot|
              %tr.carrier
                %td.edges
                  - if output_slot.edges.any?
                    %table.table.table-condensed
                      %thead
                        %tr
                          %th.edge-target Node
                          %th.energy= graph_unit(c.graph)
                          %th.share Share
                          %th.type Type
                      %tbody
                        - output_slot.edges.sort_by { |s| s.lft_node.key }.each_with_index do |output_edge, i|
                          %tr
                            %td
                              = link_to output_edge.lft_node.key, inspect_node_path(:id => output_edge.lft_node)
                              .more-info
                                = link_to 'View .ad file', link_to_edge_file(output_edge)
                            %td.value{:title => output_edge.value}= auto_number output_edge.value
                            %td.share{:title => output_edge.share}= "#{(100.0 * output_edge.parent_share).round(2)} %" unless output_slot.external_value == 0
                            %td
                              = output_edge.edge_type.to_s.humanize
                              - if output_edge.reversed?
                                .more-info Reversed
                  %td.centered{ title: output_slot.carrier.key.to_s.humanize }
                    .carrier-name{ title: output_slot.class.name }
                      = output_slot.carrier.key.to_s.humanize
                    - if output_slot.conversion
                      %span{ title: output_slot.conversion }
                        == #{ (100.0 * output_slot.conversion).round(2) } %
                      - if kms_slot?(output_slot)
                        .slot-unit== (#{ output_slot.conversion.round(3) } km/MJ)
      %td
        %table.table.table-condensed.table-bordered
          %thead
            %tr
              %th.centered Inputs
              %th.centered
                Edges
                %span.aggregate-demand{ title: node_flow(c, :inputs) }
                  = auto_number node_flow(c, :inputs)
          %tbody
            - c.inputs.sort_by { |c| c.carrier.key }.each do |input_slot|
              %tr.carrier
                %td.centered{ title: input_slot.carrier.key.to_s.humanize }
                  .carrier-name{ title: input_slot.class.name }
                    = input_slot.carrier.key.to_s.humanize
                  - if input_slot.conversion
                    %span{ title: input_slot.conversion }
                      = "#{(100 * input_slot.conversion).round(2)} %"
                %td.edges
                  - if input_slot.edges.any?
                    %table.table.table-condensed
                      %thead
                        %tr
                          %th.type Type
                          %th.share Share
                          %th.energy= graph_unit(c.graph)
                          %th.edge-target Node
                      %tbody
                        - input_slot.edges.sort_by { |s| s.rgt_node.key }.each_with_index do |input_edge, i|
                          %tr
                            %td
                              = input_edge.edge_type.to_s.humanize
                              - if input_edge.reversed?
                                .more-info Reversed

                            %td.share{:title => input_edge.share}= "#{(100 * input_edge.share).round(2)} %" unless input_edge.share.nil?
                            %td.value{:title => input_edge.value}= auto_number input_edge.value
                            %td
                              = link_to input_edge.rgt_node.key, inspect_node_path(:id => input_edge.rgt_node)
                              .more-info
                                = link_to 'View .ad file', link_to_edge_file(input_edge)
                                - if input_edge.flexible?
                                  - if input_edge.priority != -Float::INFINITY
                                    %strong
                                      Priority:
                                      = input_edge.priority
                                  - if input_edge.max_demand
                                    %strong
                                      Max Demand:
                                      = auto_number input_edge.max_demand

