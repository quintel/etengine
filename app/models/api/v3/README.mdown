# API v3

### Weak points and open issues

* Scenario ownership: now we have `author` and `user_id` field. If we add the
  `source` field then the `user_id` field could be relative to the client
  application. The ETM's `saved_scenario` object **can be migrated to user
  profile with a serialized hash 'saved_scenarios'**
* drop column `present_updated_at` or `updated_at`- one is enough

## Areas

### Get area list

#### Request

    GET /areas/

#### Response

    Status: 200 OK

    [
      {
          "co2_price": 0.00805,
          "areable_land": 20.1,
          "available_land": 53,
          "co2_emission_1990": 0.0537,
          "co2_emission_2009": 0.0544,
          "co2_emission_electricity_1990": 0.01,
          "co2_percentage_free": 0.85,
          "coast_line": 57,
          "country": "ame",
          "created_at": "2010-10-12T13:40:30Z",
          "current_electricity_demand_in_mj": 86099978,
          "el_export_capacity": 0,
          "el_import_capacity": 0,
          "entity": "",
          "export_electricity_primary_demand_factor": 1,
          "has_agriculture": true,
          ...
        },{
          ...
        }
      ]

### Get area details

#### Request

    GET /areas/nl

#### Response

    Status: 200 OK

      {
          "co2_price": 0.00805,
          "areable_land": 20.1,
          "available_land": 53,
          "co2_emission_1990": 0.0537,
          "co2_emission_2009": 0.0544,
          "co2_emission_electricity_1990": 0.01,
          "co2_percentage_free": 0.85,
          "coast_line": 57,
          "country": "ame",
          "created_at": "2010-10-12T13:40:30Z",
          "current_electricity_demand_in_mj": 86099978,
          "el_export_capacity": 0,
          "el_import_capacity": 0,
          "entity": "",
          "export_electricity_primary_demand_factor": 1,
          "has_agriculture": true,
          ...
        }

## Scenarios

### Get a single scenario

#### Request

    GET /scenarios/:id

If you set the optional `detailed` parameter then the `description`,
`user_values` and `use_fce` fields will be returned, too.

#### Response

    Status: 200 OK

    {
      "title": "My scenario"
      "url": "http://et-engine.com/scenarios/999",
      "id": 999,
      "area_code": "nl",
      "end_year": 2040,
      "template": 12345,
      "source": "ETM",
      "description": "...",
      "use_fce": "...",
      "user_values": {
        "households_number_of_inhabitants": 2.3
      }
    }

If the scenario is missing then the action returns an empty hash with a 404 HTTP
status code.

### Get predefined scenarios

This action returns an array with the predefined scenarios. This list is used on
the ETM intro page to build the select box.

#### Request

    GET /scenarios/templates

#### Response

    Status: 200 OK

    [
    {<scenario>},
    {<scenario>},
    ...
    ]
]
### Create a new scenario

#### Request

    POST /scenarios

You can pass the scenario attributes enclosed in a `scenario` JSON object. The
available attributes are:

* `area_code`: optional string, default: `nl`
* `title`: optional string, default: `API`
* `end_year`: optional integer, default: `2040`
* `source`: optional (but highly recommended) required string, the application that makes the request
* `scenario_id`: optional id of the scenario used as template / preset_scenario_id. This should be renamed into template!

##### Example

    "scenario" : {
      "title": "My scenario",
      "area_code": "nl",
      "end_year": 2040,
      "scenario_id": 12345,
      "source": "ETM"
    }

#### Response

    Status: 201 Created

    {
      "url": "http://et-engine.com/scenarios/999",
      "id": 999,
      "title": "My scenario",
      "area_code": "nl",
      "end_year": 2040,
      "template": 12345,
      "source": "ETM"
    }

Until we update NGINX the HTTP status code will be 200 rather than 201. If
something goes wrong the server returns a JSON object with the errors:

    Status: 422 Unprocessable Entity

    {
      "errors": {
        "area_code": [
          "can't be blank"
        ]
      }
    }

### Updating and querying a scenario

The two operations should better be separated, but that would probably make
the applications trigger too many requests. Since gqueries are basically read,
safe operations, the right HTTP verb should be GET, but then we'd have the
annoying URL length limit issues with IE.

The slider update is a proper PUT/PATCH request instead.

#### Request

    PUT /scenarios/:id

* `reset`: optional boolean (default: false). If true the scenario inputs will
  first be reset. This means that the scenario will use only the inputs we're
  passing with the current request. Used by the energymixer and the Mechanical
  Turk.
* `gqueries`: optional array of gqueries to run
* `scenario`: hash with the scenario attributes. Its `user_values` are merged
  with the existing values, because otherwise the entire input sets should be
  resent on every request. The `user_values` must be sent as a hash; the has
  key can be the input id (deprecated) or the input key. If you pass `reset` as
  value for a single input then the input will be... reset.
* `detailed`: optional boolean. If true then the `scenario` object response
  will contain extra information such as `use_fce` and `user_values`

##### Example

    {
      "reset": true,
      "gqueries": [
        "gquery_1",
        "gquery_2"
      ],
      "scenario": {
        "title": "New title",
        "user_values": {
          "123": 4.56,
          "households_replacement_of_existing_houses": 5.67
        }
      }
    }

#### Response

The gquery result is a hash rather than an array.

    Status: 200 OK

    {
      "scenario": <scenario>,
      "gqueries": {
        "gquery_1": {
          "present": 123,
          "future": 456,
          "unit": "MJ"
        },
        "gquery_2": {
          "present": 123,
          "future": 456,
          "unit": "euro"
        },
      }
    }

If the gquery doesn't exist then the gquery hash will contain:

    "foo" : {
      "errors": "Unknown gquery. Please check gquery list on http://et-engine.com."
    }

If we're using bad inputs the `errors` hash will contain something like:

    "errors": [
      "Missing input: foo"
    ]

Here is a complete server response that mixes valid and not valid data:

    {
      "scenario": {
        "title": "API",
        "url": "http://etengine.dev/api/v3/scenarios/30324",
        "id": 30324,
        "area_code": "nl",
        "end_year": 2040,
        "template": null,
        "source": null,
        "created_at": "2012-07-31T15:53:53+02:00"
      },
      "gqueries": {
        "wood_pellets_extraction_in_fuel_chain_emissions": {
          "unit": null,
            "present": 1.1470420000000001,
            "future": 1.1470420000000001
        },
        "aasdasdasd": {
          "errors": [
            "Missing gquery"
          ]
        }
      },
      "errors": [
        "Missing input: foo"
      ]
    }

Other things to consider: deal with gqueries that return strings or array of
strings (hello merit_order).

## Inputs

Input values are scenario-dependent, so we should pass a scenario id. If the
`scenario_id` parameter is missing then the engine will use the latest
scenario.

### Get all inputs details

#### Request

    GET /inputs
    GET /scenarios/:scenario_id/inputs

#### Response

    Status: 200 OK

    {
      "agriculture_electricity_demand": {
        "share_group": "foobar",
        "max": 5,
        "min": -5,
        "default": 0,
        "user": 3
      },-
      "agriculture_heat_demand": {
        "max": 5,
        "min": -5,
        "default": 0,
        "user": 2.3
      },
      ...
    }

* `default`: input start value
* `user`: user-set value. Not available if null
* `max`
* `min`
* `share_group`: Not available if null or empty

### Get a single input details

#### Request

    GET /inputs/:code
    GET /scenarios/:scenario_id/inputs/:code

* The `code` parameter might be the input's id (deprecated) or the input code.

#### Response

    Status: 200 OK

    {
      "code": "households_replacement_of_existing_houses",
      "share_group": "",
      "max": 5,
      "min": 0,
      "default": 0
    }

Just like the entire inputs list, but not indexed by input code. The attribute
code is added to the output.

#### Errors

If the input doesn't exist the server returns an HTTP 404 error and a message:

    Status: 404

    {
      "errors": ["Input not found"]
    }

### Get a subset of input details

#### Request

    GET /scenarios/:input_id/inputs/:keys
    GET /scenarios/:input_id/inputs/1,2,3,4,5,10,11,12,13

#### Response

    Status: 200 OK

    [
      {
        "key": "input_foobar",
        "id": 1
        "start_value": 1000,
        "end_value": 2000,
        "label": "1€/Kg",
        "current_value": 1500
      },
    [...]
      {
        "key": "input_foobar_2",
        "id": 13
        "start_value": 1000,
        "end_value": 2000,
        "label": "1€/Kg",
        "current_value": 1500
      }
    ]

## Converters

### Get a converter details

This information should be seen on the graph diagram (maybe when the user
clicks on a node and wants to see the details) and on the ETM, when the user
clicks on the converter info link (now we're loading an iframe). Do we ever
need converter info outside the scope of a scenario? We could use the
`/converters/:code` URL to get the generic converter attributes (those that
don't require an active scenario) and
`/scenarios/:scenario_id/converters/:code` to get the attributes for a
specific scenario.

#### Request

    GET /converters/:code

If the scenario_id is missing then the controller will use the latest scenario.

#### Response

    Status: 200 OK

    {
        "code": "industry_chp_supercritical_wood_pellets",
        "sector": "industry",
        "use": "energetic",
        "groups": ["electricity_production", "central_production"],
        "energy_balance_group": "central CHPs",
        "data": {
            "operational": {
                "typical_nominal_input_capacity": {
                    "present": 162.60162601626,
                    "future": 162.60162601626
                },
                "full_load_hours": {
                    "present": 5394.19087136929,
                    "future": 5394.19087136929
                },
                ...
            },
            "cost": {
                "purchase_price_per_mw_input": {
                    "present": 412050.0,
                    "future": 412050.0
                },
                "installing_costs_per_mw_input": {
                    "present": 0.0,
                    "future": 0.0
                },
                ...
        }
    }

The `data` section contains both attributes and calculations.

### Converter details for a specific scenario

#### Request

    GET /scenarios/:scenario_id/converters/:key

#### Response

See above, the response is identical.
